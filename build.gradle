buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
		classpath "org.parchmentmc:librarian:1.+"
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

group = 'com.tterrag.dummyplayers'
archivesBaseName = 'DummyPlayers'

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'

if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    version = "${mod_version}-${release_type}+${buildnumber}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'parchment', version: '2023.07.30-1.20.1'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'dummyplayers_client'
            
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                dummyplayers {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'dummyplayers_server'
        
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                dummyplayers {
                    source sourceSets.main
                }
            }
        }
        
        data {
            taskName 'dummyplayers_data'
        
            workingDirectory project.file('run')

            environment 'target', 'fmluserdevdata'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                dummyplayers {
                    source sourceSets.main
                }
            }
            
            args '--mod', 'dummyplayers', '--all', '--output', rootProject.file('src/generated/resources/'), '--existing', rootProject.file('src/main/resources')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenLocal()
}

configurations {
    shade
}

repositories {
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        name = 'sponge'
    	url = 'https://repo.spongepowered.org/repository/maven-public/'
    	content {
    	    includeGroup "org.spongepowered"
    	}
    }
    mavenLocal()
}

dependencies {
    minecraft 'net.neoforged:forge:' + minecraft_version + '-' + forge_version
    
    def registrate = "com.tterrag.registrate:Registrate:${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    // Annotation Processors
    def mixinap = 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
    annotationProcessor mixinap
    testAnnotationProcessor mixinap
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.tterrag.dummyplayers.repack.registrate'
    archiveClassifier = ''
}

reobf {
    shadowJar {}
}

build.dependsOn shadowJar
build.dependsOn reobfShadowJar

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes([
            "Specification-Title": "dummyplayers",
            "Specification-Vendor": "tterrag",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"tterrag",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
